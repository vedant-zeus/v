#include <stdio.h>
#include <stdlib.h>

// Node structure
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Function to create a new node
Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a new node at the beginning of the list
void insertAtBeginning(Node** head, int data) {
    Node* newNode = createNode(data);
    newNode->next = *head;
    *head = newNode;
}

// Function to insert a new node at the end of the list
void insertAtEnd(Node** head, int data) {
    Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
    } else {
        Node* current = *head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }
}

// Function to insert a new node at a specific position in the list
void insertAtPosition(Node** head, int data, int position) {
    Node* newNode = createNode(data);
    if (*head == NULL || position == 0) {
        newNode->next = *head;
        *head = newNode;
    } else {
        Node* current = *head;
        int count = 0;
        while (current != NULL && count < position - 1) {
            current = current->next;
            count++;
        }
        if (current != NULL) {
            newNode->next = current->next;
            current->next = newNode;
        }
    }
}

// Function to delete a node from the list
void deleteAtBeginning(Node** head) {
    if (*head == NULL) {
        printf("List is empty\n");
    } else {
        Node* temp = *head;
        *head = (*head)->next;
        free(temp);
    }
}

// Function to delete a node at the end of the list
void deleteAtEnd(Node** head) {
    if (*head == NULL) {
        printf("List is empty\n");
    } else if ((*head)->next == NULL) {
        free(*head);
        *head = NULL;
    } else {
        Node* current = *head;
        while (current->next->next != NULL) {
            current = current->next;
        }
        free(current->next);
        current->next = NULL;
    }
}

// Function to delete a node at a specific position in the list
void deleteAtPosition(Node** head, int position) {
    if (position == 0) {
        deleteAtBeginning(head);
    } else {
        Node* current = *head;
        int i = 0;
        while (i < position - 1 && current->next != NULL) {
            current = current->next;
            i++;
        }
        if (current->next == NULL) {
            printf("Position out of bounds\n");
        } else {
            Node* temp = current->next;
            current->next = current->next->next;
            free(temp);
        }
    }
}


// Function to traverse the list and print the nodes


int main() {
    Node* head = NULL;
int choice , data , position ;
while(1){
    printf("1. insert at beg\n");
    printf("2. insert at end\n");
    printf("3. insert at position\n");
    printf("4. delete at beg\n");
    printf("5. delete at end\n");
    printf("6. delete at position\n");
    printf("7. Traverse\n");
    printf("8. exit\n");
    printf("Enter choice :");
    scanf("%d",&choice);
    
    switch(choice){
    case 1 :
    printf("Enter data");
    scanf("%d",&data);
    insertAtBeginning(&head,data);
    break;
    case 2 :
    printf("Enter data");
    scanf("%d",&data);
    insertAtEnd(&head,data);
    break;
    case 3 :
    printf("Enter data");
    scanf("%d",&data);
    printf("Enter position");
    scanf("%d",&position);
    insertAtPosition(&head,data,position);
    break;
    case 4 :
    deleteAtBeginning(&head);
    break;
    case 5 :
    deleteAtEnd(&head);
    break;
    case 6 :
    printf("Enter position");
    scanf("%d",&position);
    deleteAtPosition(&head,position);
    break;
    case 8 :
    exit(0);
    default:
            printf("Invalid choice");
    }
}
    return 0;
}
  
